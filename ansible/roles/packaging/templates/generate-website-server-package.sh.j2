#!/bin/bash -xe

#
# generate-api-server-package
#
# A script to build a deb package from the beatport-api-x source code.
# It expects the build environment to already be in place.
#

##### Variables

# set the location of the source code;
# defaults to the current directory if no value was passed in
if [[ -z $1 ]]; then
	WORKSPACE="$PWD"
else
	WORKSPACE="$1"
fi

# the directory in which to store the generated package artifact
ARTIFACT_DIR="$WORKSPACE"

# the name of the generated package
PACKAGE_NAME='sitterfied-website-server'

cd "$WORKSPACE"
PACKAGE_VERSION=$(printf '0.%s.%s' "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)")

# the final generated deb file's name
DEB_FILE_NAME="${PACKAGE_NAME}_${PACKAGE_VERSION}_amd64.deb"

# where the package building will take place
BUILD_DIR="{{ packaging_build_dir }}"

# the name of this script for error output
BASENAME="${0##*/}"


##### Functions

set_package_version() {
	# update the package metadata file
	/bin/sed -i "s/^Version: .*/Version: $PACKAGE_VERSION/g" "${BUILD_DIR}/${PACKAGE_NAME}/DEBIAN/control"
}

copy_latest_source_into_build_tree() {
  # copy the application files
  /usr/bin/install -d "${BUILD_DIR}/${PACKAGE_NAME}/opt/beatportapi"
  /usr/bin/rsync -av --delete "${WORKSPACE}/beatportapi" "${BUILD_DIR}/${PACKAGE_NAME}/opt/beatportapi/"
  /usr/bin/rsync -av "${WORKSPACE}/requirements.txt" "${BUILD_DIR}/${PACKAGE_NAME}/opt/beatportapi/requirements.txt"

  # generate and then copy the static files
  if [[ -d "/www/static" ]]; then
    rm -rf "/www/static"
  fi
  cd "$WORKSPACE"
  django-admin collectstatic --noinput
  /usr/bin/install -d "${BUILD_DIR}/${PACKAGE_NAME}/www/static"
  /usr/bin/rsync -av --delete "/www/static/" "${BUILD_DIR}/${PACKAGE_NAME}/www/static/"
}

build_package() {
	cd "$BUILD_DIR"
	/usr/bin/fakeroot /usr/bin/dpkg --build "$PACKAGE_NAME" "$DEB_FILE_NAME"
	[[ -d $ARTIFACT_DIR ]] || /usr/bin/install -d "$ARTIFACT_DIR"
	cp "$DEB_FILE_NAME" "$ARTIFACT_DIR"
}


##### Main

# ensure user is not root
if [[ "$UID" -eq "0" ]]; then
	printf "${BASENAME}: you must not run this script as root\n" >&2
	exit 1
fi

# validate that we're in a git repository
cd "$WORKSPACE"
REPO=$(printf '%s' "$(git rev-parse --show-toplevel 2> /dev/null)")
if [[ -z $REPO ]]; then
	printf "${BASENAME}: you must run this script inside of a git repository\n" >&2
	exit 1
fi

set_package_version
copy_latest_source_into_build_tree
build_package

exit 0
